import random
import numpy as np

# Generate first element
# for i in range(1, M + 1):
#     if random.random() < p: 
#         first = i
#         break 
        
# Function to generate apery set
def generate_apery_set(M, p, first): 
    # Initialize apery set
    apery_set = [first]
    # print('1. First element is', first)

    # times for self_generated and new_elements
    times_self_generated = []
    times_new_elements = []
    times_non_apery = []

    print(first)
    # Generate apery set
    for i in range(first + 1, M + 1):
        # Check if a representative of $a mod first$ is already in the apery set
        for a in apery_set:
            if (i - a) % first == 0:
                times_non_apery.append(i)
                break
        # If not add it to the apery set
        else:
            # Check if element can be generated by the apery set
            for a in apery_set: 
                if (i - a) in apery_set:
                    apery_set.append(i)
                    times_self_generated.append(i)
                    # print("{}. Self-generated element: {}".format(len(apery_set), i))
                    break 
            # If not, generate it with probability p
            else:
                if random.random() < p:
                    apery_set.append(i)
                    times_new_elements.append(i)
                    # print("{}. New element: {}".format(len(apery_set), i))
            if len(apery_set) == first:
                break
    return apery_set, times_self_generated, times_new_elements, times_non_apery

# Print statistics on a random apery set
def print_statistics(apery_set, times_self_generated, times_new_elements):
    print("Statistics on apery set with M = {}, p = {} and first = {}".format(M, p, apery_set[0]))
    print("1. Number of elements in the apery set: {}".format(len(apery_set)))
    print("2. Number of newly added elements: {}".format(len(times_new_elements)))
    print("3. Ratio of newly added elements: {}".format(len(times_new_elements)/len(apery_set)))
    # Print the times of newly added elements and the times of self-generated elements, when printing times of new generated elements, print the time in square brakets
    # break the line when the number of elements in a line is more than 20
    for i,s in enumerate(apery_set):
        if s in times_self_generated:
            print(s, end = " ")
        elif s in times_new_elements:
            print(">>>{}<<<".format(s), end = " ")
        if (i+1) % 20 == 0:
            print()
    for i,s in enumerate(apery_set):
        if s in times_self_generated:
            print("-", end = "")
        elif s in times_new_elements:
            print("*".format(s), end = "")
        if (i+1) % 100 == 0:
            print()
    print()
import matplotlib.pyplot as plt

# make the same plot function, but to a png file
def print_statistics_to_png(apery_set, times_self_generated, times_new_elements, times_non_apery):
    # Create a plot
    fig = plt.figure()
    ax = fig.add_subplot(111)
    # Plot the times of self-generated elements
    ax.plot(apery_set[0], [0.1], 'r.', marker='|')
    ax.plot(times_self_generated, [0.1]*len(times_self_generated), 'g.', markersize=1)
    # Plot the times of newly added elements
    ax.plot(times_new_elements, [0.1]*len(times_new_elements), 'r.', marker='|')
    # Plot the times of non-apery elements
    ax.plot(apery_set[0], [-0.1], 'b.', markersize='1')
    ax.plot(times_non_apery, [-0.1]*len(times_non_apery), 'b.', markersize='1')
    ax.plot(times_self_generated, [-0.1]*len(times_self_generated), 'b.', markersize='1')
    ax.plot(times_new_elements, [-0.1]*len(times_new_elements), 'b.', markersize='1')

    # make the png file wider
    ax.set_ylim([-0.75, 0.75])
    fig.set_size_inches(15, 2)
    fig.savefig('apery_set.png', dpi=500)
    ax.set_xlabel('Elements')
    ax.set_title('Apery set with M = {}, p = {} and first = {}'.format(M, p, apery_set[0])) 
    # Close the png file
    plt.close(fig)
    # Print statistics on apery set
    print_statistics(apery_set, times_self_generated, times_new_elements)


M = 100000
# ask in terminal first element, print to png and repeat until user input is q
while True:
    first = input("Enter first element (q to quit): ")
    if first == 'q':
        break
    first = int(first)
    p = 1.0 / first
    apery_set, times_self_generated, times_new_elements, times_non_apery = generate_apery_set(M, p, first)
    print_statistics_to_png(apery_set, times_self_generated, times_new_elements, times_non_apery)

