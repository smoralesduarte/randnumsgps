import random
import numpy as np

# Generate first element
# for i in range(1, M + 1):
#     if random.random() < p: 
#         first = i
#         break 
        
# Function to generate apery set
def generate_apery_set(M, p, first): 
    # Initialize apery set
    apery_set = [first]
    # print('1. First element is', first)

    # times for generated and new_elements
    generated = []
    new_elements = [first]
    non_apery = []

    print(first)
    # Generate apery set
    for i in range(first + 1, M + 1):
        # Check if a representative of $a mod first$ is already in the apery set
        for a in apery_set:
            if (i - a) % first == 0:
                non_apery.append(i)
                break
        # If not add it to the apery set
        else:
            # Check if element can be generated by the apery set
            for a in apery_set: 
                if (i - a) in apery_set:
                    apery_set.append(i)
                    generated.append(i)
                    break 
            # If not, generate it with probability p
            else:
                if random.random() < p:
                    apery_set.append(i)
                    new_elements.append(i)
            if len(apery_set) == first:
                break
    return apery_set, generated, new_elements, non_apery

# Print statistics on a random apery set
def print_statistics(apery_set, generated, new_elements):
    print("Statistics on apery set with M = {}, p = {} and first = {}".format(M, p, apery_set[0]))
    print("1. Number of elements in the apery set: {}".format(len(apery_set)))
    print("2. Embedding dimension: {}".format(len(new_elements)))
    print("3. Ratio of embedding dimension over multiplicity: {}".format(len(new_elements)/len(apery_set)))
    # Print the times of newly added elements and the times of self-generated elements, when printing times of new generated elements, print the time in square brakets
    # break the line when the number of elements in a line is more than 20
    for i,s in enumerate(apery_set):
        if s in generated:
            print(s, end = " ")
        elif s in new_elements:
            print(">>>{}<<<".format(s), end = " ")
        if (i+1) % 20 == 0:
            print()
    for i,s in enumerate(apery_set):
        if s in generated:
            print("-", end = "")
        elif s in new_elements:
            print("*".format(s), end = "")
        if (i+1) % 100 == 0:
            print()
    print()
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use("pgf")
matplotlib.rcParams.update({
    "pgf.texsystem": "pdflatex",
    'font.family': 'serif',
    'text.usetex': True,
    'pgf.rcfonts': False,
    'figure.autolayout': True
})

# make the same plot function, but to a png file
def print_statistics_to_png(apery_set, generated, new_elements, non_apery):
    # Create a plot
    fig = plt.figure()
    ax = fig.add_subplot(111)
    # Plot the elements of the apery set that are not minimal
    ax.plot(generated, [0.1]*len(generated), 'g.', markersize=1)
    # Plot the elements of the minimal generating set with color red and marker '|'
    ax.plot(new_elements, [0.1]*len(new_elements), 'r.', marker='|')
    # Plot all the elements in the semigroup 
    ax.plot(apery_set[0], [-0.1], 'b.', markersize='1')
    ax.plot(non_apery, [-0.1]*len(non_apery), 'b.', markersize='1')
    ax.plot(generated, [-0.1]*len(generated), 'b.', markersize='1')
    ax.plot(new_elements, [-0.1]*len(new_elements), 'b.', markersize='1')

    # make the png file wider
    ax.set_ylim([-0.5, 0.5])
    ax.set_xlim([0, generated[-1] + first])
    fig.set_size_inches(5, 3)
    # remove y ticks
    ax.set_yticks([])
    ax.set_title('$S(M, p)$ with $M$ = {} and $p$ = {}'.format(M, p, apery_set[0])) 
    # Add legend
    ax.legend(['ApÃ©ry set', 'Minimal generating set', 'Semigroup'], loc='lower right')
    
    plt.close(fig)
    fig.savefig('ertype_visual_{}_{}.pgf'.format(M, p), dpi=500)
    # Print statistics on apery set
    plt.show()
    print_statistics(apery_set, generated, new_elements)


M = 100000
# ask in terminal first element, print to png and repeat until user input is q
while True:
    first = input("Enter first element (q to quit): ")
    if first == 'q':
        break
    first = int(first)
    p = 1.0 / first
    apery_set, generated, new_elements, non_apery = generate_apery_set(M, p, first)
    print_statistics_to_png(apery_set, generated, new_elements, non_apery)

